NGS-Pipeline Command Line
=========================

The ngs-pipeline command line is invoked using ``ngs-pl`` executable, i.e.::

  ngs-pl CMD [ARGS]

For example, to see the available commands, execute::

  $ ngs-pl showcmds
 
The available CMDs are listed in :doc:`List of Commands <cmds/index>`.

Below are an excerpt of commands that are most commonly used.

Preparation commands
--------------------

:doc:`cmds/generate-links``
  This command generate symbolic links from a batch of files.
  The link names can be stripped by number of underscore (from beginning or
  end of filename) or by prefix.
  Paired-end reads will be linked properly.


prepare-sample-directory
  Given a manifest file containing the sample codes and corresponding fastq files,
  the command will prepare the directory structure for further processing.

  The basic command is::

    ngs-pl prepare-sample-directory -o OUTDIR -i MANIFEST_FILE INPUTDIR

  OUTDIR is the target directory where sample directories will be created.
  INPUTDIR is the source directory where the read files to be prepared are reside.
  MANIFEST_FILE is a tab-delimited file with header of SAMPLE and FASTQ, for the sample
  codes and their corresponding FASTQ files, respectively.

  [TODO: provide example manifest file]

Execution commands
------------------

run-sample-variant-caller
  Run the individual sample variant calling pipeline in parallel, which will go through mapping
  reads, processing mapped reads, and performing all necessary process up to getting
  GVCF files


run-joint-variant-caller
  Run the joint variant calling pipeline to process GVCF files into multi-sample VCF files.
  This command can be run after completing ``run-sample-variant-caller``


:doc:`cmds/run-targeted-variant-caller`
  Run targeted variant calling pipeline to produce single-sample VCF file for each sample.
  Multi-sample VCF file then can be generated by using ``bcftools merge``.


run-multistep-variant-caller
  Run the multistep variant caller from single command, basically by executing
  ``generate-manifest``, ``prepare-sample-directory``, ``run-sample-variant-caller``
  and ``run-joint-variant-caller`` consecutively.
